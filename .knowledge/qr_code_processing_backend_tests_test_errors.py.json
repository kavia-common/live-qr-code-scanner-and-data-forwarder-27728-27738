{"is_source_file": true, "format": "Python", "description": "This file contains unit tests for error handling in the QR code processing backend, specifically testing error responses when external requests fail or throw unexpected exceptions.", "external_files": ["src/api/main.py", "httpx"], "external_methods": ["httpx.RequestError"], "published": [], "classes": [], "methods": [{"name": "test_process_returns_502_on_request_error_to_external(client, monkeypatch)", "description": "Tests that the service returns a 502 status code when a network request error occurs during processing.", "scope": "", "scopeKind": ""}, {"name": "test_process_returns_500_on_unexpected_exception(client, monkeypatch)", "description": "Tests that the service returns a 500 status code when an unexpected exception occurs during processing.", "scope": "", "scopeKind": ""}, {"name": "fake_forward(client_obj, external_resp: httpx.Response)", "scope": "test_process_returns_502_on_request_error_to_external", "scopeKind": "function", "description": "unavailable"}, {"name": "fake_send(client_obj, data: str)", "scope": "test_process_returns_502_on_request_error_to_external", "scopeKind": "function", "description": "unavailable"}], "calls": ["monkeypatch.setattr", "client.post", "resp.status_code", "resp.json"], "search-terms": ["test_errors.py", "error handling", "QRScannerService", "fake_send", "fake_forward", "monkeypatch", "httpx.RequestError", "RuntimeError"], "state": 2, "file_id": 12, "knowledge_revision": 29, "git_revision": "4555da101b4377df22c6e33ceb8d04c6888d41b7", "ctags": [{"_type": "tag", "name": "fake_forward", "path": "/home/kavia/workspace/code-generation/live-qr-code-scanner-and-data-forwarder-27728-27738/qr_code_processing_backend/tests/test_errors.py", "pattern": "/^    def fake_forward(client_obj, external_resp: httpx.Response):$/", "file": true, "language": "Python", "kind": "function", "signature": "(client_obj, external_resp: httpx.Response)", "scope": "test_process_returns_500_on_unexpected_exception", "scopeKind": "function"}, {"_type": "tag", "name": "fake_forward", "path": "/home/kavia/workspace/code-generation/live-qr-code-scanner-and-data-forwarder-27728-27738/qr_code_processing_backend/tests/test_errors.py", "pattern": "/^    def fake_forward(client_obj, external_resp: httpx.Response):$/", "file": true, "language": "Python", "kind": "function", "signature": "(client_obj, external_resp: httpx.Response)", "scope": "test_process_returns_502_on_request_error_to_external", "scopeKind": "function"}, {"_type": "tag", "name": "fake_send", "path": "/home/kavia/workspace/code-generation/live-qr-code-scanner-and-data-forwarder-27728-27738/qr_code_processing_backend/tests/test_errors.py", "pattern": "/^    def fake_send(client_obj, data: str):$/", "file": true, "language": "Python", "kind": "function", "signature": "(client_obj, data: str)", "scope": "test_process_returns_500_on_unexpected_exception", "scopeKind": "function"}, {"_type": "tag", "name": "fake_send", "path": "/home/kavia/workspace/code-generation/live-qr-code-scanner-and-data-forwarder-27728-27738/qr_code_processing_backend/tests/test_errors.py", "pattern": "/^    def fake_send(client_obj, data: str):$/", "file": true, "language": "Python", "kind": "function", "signature": "(client_obj, data: str)", "scope": "test_process_returns_502_on_request_error_to_external", "scopeKind": "function"}, {"_type": "tag", "name": "test_process_returns_500_on_unexpected_exception", "path": "/home/kavia/workspace/code-generation/live-qr-code-scanner-and-data-forwarder-27728-27738/qr_code_processing_backend/tests/test_errors.py", "pattern": "/^def test_process_returns_500_on_unexpected_exception(client, monkeypatch):$/", "language": "Python", "kind": "function", "signature": "(client, monkeypatch)"}, {"_type": "tag", "name": "test_process_returns_502_on_request_error_to_external", "path": "/home/kavia/workspace/code-generation/live-qr-code-scanner-and-data-forwarder-27728-27738/qr_code_processing_backend/tests/test_errors.py", "pattern": "/^def test_process_returns_502_on_request_error_to_external(client, monkeypatch):$/", "language": "Python", "kind": "function", "signature": "(client, monkeypatch)"}], "hash": "67b35b59c924d75fc61a70051f097def", "format-version": 4, "code-base-name": "qr_code_processing_backend", "filename": "qr_code_processing_backend/tests/test_errors.py", "revision_history": [{"29": "4555da101b4377df22c6e33ceb8d04c6888d41b7"}]}